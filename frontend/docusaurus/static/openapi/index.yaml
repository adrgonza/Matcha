openapi: 3.1.0
info:
  title: Matcha - OpenAPI 3.1
  version: 1.0.0
  description: |-
    **Welcome to the Matcha Dating App API!**  
    This specification outlines the Matcha API, a service designed to help people find meaningful connections. The API is built to be:
    - **JSend-compliant**: All responses conform to the [JSend specification](https://github.com/omniti-labs/jsend).
    - **Secure and Privacy-Focused**: We prioritize user safety, data privacy, and consent.
    - **Feature-Rich**: Manage profiles, authenticate users, exchange messages, receive notifications, and more.

    **Useful Resources:**
    - [Matcha GitHub Repository](https://github.com/ugoi/Matcha)
    - [OpenAPI Definition on GitHub](https://github.com/ugoi/Matcha/blob/main/backend/openapi/index.yaml)

  termsOfService: https://github.com/ugoi/Matcha
  contact:
    name: Code Crafting Pro
    url: https://github.com/ugoi/Matcha
    email: codecraftingpro@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

externalDocs:
  description: Learn more about the Matcha project on GitHub
  url: https://github.com/ugoi/Matcha

x-logo:
  url: "https://example.com/images/matcha-logo.png"
  backgroundColor: "#FFFFFF"
  altText: "Matcha Logo"

servers:
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: profile
    description: |-
      Operations for managing and interacting with user profiles.

      **Capabilities:**
      - View and update profile details
      - Search profiles by various filters
      - Like, block, or report users
      - Manage user interests and photos
    externalDocs:
      description: Detailed documentation for profile operations
      url: https://github.com/ugoi/Matcha

  - name: user
    description: |-
      Operations that allow you to manage user accounts.

      **Capabilities:**
      - Create a new user
      - Update existing user details
      - View user account information
      - Delete a user account
    externalDocs:
      description: More information on user management
      url: https://github.com/ugoi/Matcha

  - name: auth
    description: |-
      Operations related to user authentication and authorization.

      **Capabilities:**
      - User registration
      - Login and logout
      - Password reset and recovery
    externalDocs:
      description: Learn more about authentication flows
      url: https://github.com/ugoi/Matcha

  - name: notifications
    description: |-
      Operations to handle user notifications.

      **Capabilities:**
      - View notifications
    externalDocs:
      description: Notification management details
      url: https://github.com/ugoi/Matcha

  - name: chat
    description: |-
      Operations for messaging between users.

      **Capabilities:**
      - Send messages to other users
      - View conversation history
    externalDocs:
      description: Chat system documentation
      url: https://github.com/ugoi/Matcha

paths:
  ### Profile Endpoints
  /profiles:
    get:
      tags:
        - profile
      summary: Get a list of user profiles
      description: Retrieve multiple user profiles (with optional filters & sorting).
      parameters:
        - in: query
          name: sort_by
          description: Sort criteria (JSON)
          schema:
            type: string
        - in: query
          name: filter_by
          description: Filter criteria (JSON)
          schema:
            type: string
      responses:
        "200":
          description: A list of profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicProfile"

  /profiles/{user_id}:
    get:
      tags:
        - profile
      summary: Get a user profile by ID
      description: Retrieve a single user profile by user_id.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single profile

  /profiles/me:
    get:
      tags:
        - profile
      summary: Get my profile
      description: Retrieve the authenticated user's profile.
      responses:
        "200":
          description: The authenticated user's profile
    patch:
      tags:
        - profile
      summary: Update my profile
      description: Update fields of the authenticated user's profile.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                gps_longitude:
                  type: string
                gps_latitude:
                  type: string
      responses:
        "200":
          description: Profile updated successfully
    post:
      tags:
        - profile
      summary: Create or complete my profile
      description: Initialize or complete the authenticated user's profile details.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                gender:
                  type: string
                age:
                  type: string
                sexual_preference:
                  type: string
                biography:
                  type: string
                profile_picture:
                  type: string
                gps_latitude:
                  type: string
                gps_longitude:
                  type: string
      responses:
        "201":
          description: Profile created or updated successfully

  ### Profile Visits
  /profiles/{user_id}/visits:
    post:
      tags:
        - profile
      summary: Record a profile visit
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Visit recorded successfully

  /profiles/visits:
    get:
      tags:
        - profile
      summary: Get profiles the user visited
      responses:
        "200":
          description: List of visited profiles

  ### Profile Interests
  /profiles/me/interests:
    post:
      tags:
        - profile
      summary: Add interests to my profile
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                interests:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Interests added
    get:
      tags:
        - profile
      summary: Get my interests
      responses:
        "200":
          description: List of interests
    delete:
      tags:
        - profile
      summary: Remove interests from my profile
      description: Provide interests to remove via query parameters.
      parameters:
        - in: query
          name: interests
          description: Interests to remove (repeat for multiple)
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Interests removed

  /profiles/{user_id}/interests:
    get:
      tags:
        - profile
      summary: Get interests of a user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of user's interests

  ### Profile Pictures
  /profiles/me/pictures:
    post:
      tags:
        - profile
      summary: Add pictures to my profile
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                pictures:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Pictures added
    get:
      tags:
        - profile
      summary: Get my profile pictures
      responses:
        "200":
          description: List of pictures
    delete:
      tags:
        - profile
      summary: Delete pictures from my profile
      description: Provide pictures to remove via query parameters.
      parameters:
        - in: query
          name: pictures
          description: Pictures to remove (repeat for multiple)
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Pictures removed

  ### Profile Likes & Matches
  /profiles/{user_id}/like:
    post:
      tags:
        - profile
      summary: Like a user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "201":
          description: User liked
    delete:
      tags:
        - profile
      summary: Remove like from a user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Like removed

  /profiles/{user_id}/dislike:
    post:
      tags:
        - profile
      summary: Dislike a user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "201":
          description: User disliked

  /profiles/likes:
    get:
      tags:
        - profile
      summary: Get my likes
      responses:
        "200":
          description: List of liked profiles

  /profiles/matched:
    get:
      tags:
        - profile
      summary: Get my matches
      responses:
        "200":
          description: List of matched profiles

  ### Profile Blocks
  /profiles/blocks:
    get:
      tags:
        - profile
      summary: Get blocked profiles
      responses:
        "200":
          description: List of blocked profiles

  /profiles/{user_id}/block:
    post:
      tags:
        - profile
      summary: Block a user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "201":
          description: User blocked
    delete:
      tags:
        - profile
      summary: Unblock a user
      description: Provide a reason via query parameter if needed.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: query
          name: reason
          description: Reason for unblocking (optional)
          required: false
          schema:
            type: string
      responses:
        "200":
          description: User unblocked

  ### Profile Reports
  /profiles/reports:
    get:
      tags:
        - profile
      summary: Get reported profiles
      responses:
        "200":
          description: List of reported profiles

  /profiles/{user_id}/report:
    post:
      tags:
        - profile
      summary: Report a user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        "201":
          description: User reported

  ### User Endpoints
  /users/me:
    get:
      tags:
        - user
      summary: Get my user account
      responses:
        "200":
          description: User account details
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          title:
                            type: string
                          user:
                            $ref: "#/components/schemas/User"
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/users/me'
        - lang: typescript
          source: |
            const requestOptions: RequestInit = {
              method: "GET",
              redirect: "follow",
            };

            try {
              const response = await fetch("http://localhost:3000/api/users/me", requestOptions);
              const json = await response.json();
              console.log(json);
              const status = json.status;
              if (status === "error") {
                console.error(status)
              } else if (status === "fail") {
                console.log(status)
              } else if (status === "success") {
                console.error(status)
              }
            } catch (error) {
              console.error("Error:", error);
            }

    delete:
      tags:
        - user
      summary: Delete my user account
      responses:
        "200":
          description: User account deleted
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          title:
                            type: string
                          message:
                            type: string
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/users/me' \
            --request DELETE
        - lang: typescript
          source: |
            const requestOptions: RequestInit = {
              method: "DELETE",
              redirect: "follow",
            };

            try {
              const response = await fetch("http://localhost:3000/api/users/me", requestOptions);
              const json = await response.json();
              console.log(json);
              const status = json.status;
              if (status === "error") {
                console.error(status)
              } else if (status === "fail") {
                console.log(status)
              } else if (status === "success") {
                console.error(status)
              }
            } catch (error) {
              console.error("Error:", error);
            }
    patch:
      tags:
        - user
      summary: Update my user account
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                phone:
                  type: string
      responses:
        "200":
          description: User account updated
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          title:
                            type: string
                          user:
                            $ref: "#/components/schemas/User"
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/users/me' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'username=john_doe' \
            --data-urlencode 'email=john.doe@gmail.com' \
            --data-urlencode 'first_name=John' \
            --data-urlencode 'last_name=Doe' \
            --data-urlencode 'phone=1234567890' \
            --request PATCH
        - lang: typescript
          source: |
            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

            const urlencoded = new URLSearchParams();
            urlencoded.append("username", "john_doe");
            urlencoded.append("email", "john.doe@gmail.com");
            urlencoded.append("first_name", "John");
            urlencoded.append("last_name", "Doe");
            urlencoded.append("phone", "1234567890");

            const requestOptions: RequestInit = {
              method: "PATCH",
              headers: myHeaders,
              body: urlencoded,
              redirect: "follow",
            };

            try {
              const response = await fetch("http://localhost:3000/api/users/me", requestOptions);
              const json = await response.json();
              console.log(json);
              const status = json.status;
              if (status === "error") {
                console.error(status)
              } else if (status === "fail") {
                console.log(status)
              } else if (status === "success") {
                console.error(status)
              }
            } catch (error) {
              console.error("Error:", error);
            }
  ### Auth Endpoints
  /signup:
    post:
      security: []
      tags:
        - auth
      summary: Sign up
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                username:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          title:
                            type: string
                          user:
                            $ref: "#/components/schemas/User"
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/signup' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'firstName=John' \
            --data-urlencode 'username=john_doe' \
            --data-urlencode 'lastName=Doe' \
            --data-urlencode 'email=john.doe@gmail.com' \
            --data-urlencode 'password=Password123...'
        - lang: typescript
          source: |
            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

            const urlencoded = new URLSearchParams();
            urlencoded.append("firstName", "John");
            urlencoded.append("username", "john_doe");
            urlencoded.append("lastName", "Doe");
            urlencoded.append("email", "john.doe@gmail.com");
            urlencoded.append("password", "Password123...");

            const requestOptions: RequestInit = {
              method: "POST",
              headers: myHeaders,
              body: urlencoded,
              redirect: "follow",
            };

            try {
              const response = await fetch(
                "http://localhost:3000/api/signup",
                requestOptions
              );

              const json = await response.json();
              console.log(json);
              const status = json.status;
              if (status === "error") {
                console.error(status)
              } else if (status === "fail") {
                console.log(status)
              } else if (status === "success") {
                console.error(status)
              }
            } catch (error) {
              console.error("Error:", error);
            }

  /login:
    post:
      security: []
      tags:
        - auth
      summary: Login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Authenticated successfully
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          title:
                            type: string
                          token:
                            type: string
                            description: JWT token for authenticated sessions
                          user:
                            $ref: "#/components/schemas/User"
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
          - lang: cURL
            source: |
              curl --location 'http://localhost:3000/api/login' \
              --header 'Content-Type: application/x-www-form-urlencoded' \
              --data-urlencode 'username=john_doe' \
              --data-urlencode 'password=Password123...'
          - lang: typescript
            source: |
              const myHeaders = new Headers();
              myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

              const urlencoded = new URLSearchParams();
              urlencoded.append("username", "john_doe");
              urlencoded.append("password", "Password123...");

              const requestOptions: RequestInit = {
                method: "POST",
                headers: myHeaders,
                body: urlencoded,
                redirect: "follow",
              };

              try {
                const response = await fetch("http://localhost:3000/api/login", requestOptions);
                const json = await response.json();
                const status = json.status;
                if (status === "error") {
                  console.error(status, json);
                } else if (status === "fail") {
                  console.log(status, json.data.errors);
                } else if (status === "success") {
                  console.log("Logged in successfully!", json.data);
                }
              } catch (error) {
                console.error("Error:", error);
              }

  /logout:
    get:
      tags:
        - auth
      summary: Logout
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/logout'
        - lang: typescript
          source: |
            const requestOptions: RequestInit = {
              method: "GET",
              redirect: "follow",
            };

            try {
              const response = await fetch("http://localhost:3000/api/logout", requestOptions);
              const json = await response.json();
              const status = json.status;
              if (status === "error") {
                console.error(status, json);
              } else if (status === "fail") {
                console.log(status, json.data.errors);
              } else if (status === "success") {
                console.log("Logged out successfully!", json.data);
              }
            } catch (error) {
              console.error("Error:", error);
            }

  /check-auth:
    get:
      tags:
        - auth
      summary: Check authentication
      responses:
        "200":
          description: Session is valid
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Not authenticated
          content:
            application/text:
              schema:
                type: string
                example: Unauthorized
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/check-auth'
        - lang: typescript
          source: |
            const requestOptions: RequestInit = {
              method: "GET",
              redirect: "follow",
            };

            try {
              const response = await fetch("http://localhost:3000/api/check-auth", requestOptions);
              const json = await response.json();
              const status = json.status;
              if (status === "error") {
                console.error(status, json);
              } else if (status === "fail") {
                console.log(status, json.data.errors);
              } else if (status === "success") {
                console.log("Session is valid!", json.data);
              }
            } catch (error) {
              console.error("Error:", error);
            }

  /reset-password:
    post:
      security: []
      tags:
        - auth
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Password reset link sent
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/reset-password' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'email=john.doe@gmail.com'
        - lang: typescript
          source: |
            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

            const urlencoded = new URLSearchParams();
            urlencoded.append("email", "john.doe@gmail.com");

            const requestOptions: RequestInit = {
              method: "POST",
              headers: myHeaders,
              body: urlencoded,
              redirect: "follow",
            };

            try {
              const response = await fetch(
                "http://localhost:3000/api/reset-password",
                requestOptions
              );

              const json = await response.json();
              console.log(json);
              const status = json.status;
              if (status === "error") {
                console.error(status)
              } else if (status === "fail") {
                console.log(status)
              } else if (status === "success") {
                console.error(status)
              }
            } catch (error) {
              console.error("Error:", error);
            }

    patch:
      security: []
      tags:
        - auth
      summary: Reset password
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/reset-password' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'token=123456' \
            --data-urlencode 'password=Password123...'
        - lang: typescript
          source: |
            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

            const urlencoded = new URLSearchParams();
            urlencoded.append("token", "123456");
            urlencoded.append("password", "Password123...");

            const requestOptions: RequestInit = {
              method: "PATCH",
              headers: myHeaders,
              body: urlencoded,
              redirect: "follow",
            };

            try {
              const response = await fetch(
                "http://localhost:3000/api/reset-password",
                requestOptions
              );

              const json = await response.json();
              console.log(json);
              const status = json.status;
              if (status === "error") {
                console.error(status)
              } else if (status === "fail") {
                console.log(status)
              } else if (status === "success") {
                console.error(status)
              }
            } catch (error) {
              console.error("Error:", error);
            }

  /resend-verification-email:
    post:
      security: []
      tags:
        - auth
      summary: Resend verification email
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Verification email resent
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/resend-verification-email' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'john.doe@gmail.com'
        - lang: typescript
          source: |
            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

            const urlencoded = new URLSearchParams();
            urlencoded.append("email", "john.doe@gmail.com");

            const requestOptions: RequestInit = {
              method: "POST",
              headers: myHeaders,
              body: urlencoded,
              redirect: "follow",
            };

            try {
              const response = await fetch(
                "http://localhost:3000/api/resend-verification-email",
                requestOptions
              );

              const json = await response.json();
              console.log(json);
              const status = json.status;
              if (status === "error") {
                console.error(status)
              } else if (status === "fail") {
                console.log(status)
              } else if (status === "success") {
                console.error(status)
              }
            } catch (error) {
              console.error("Error:", error);
            }

  /verify-email:
    patch:
      security: []
      tags:
        - auth
      summary: Verify email
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                    - $ref: "#/components/schemas/SuccessResponse"
                    title: SuccessResponse
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                  - $ref: "#/components/schemas/FailResponse"
                  - $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location 'http://localhost:3000/api/verify-email' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'token=123456'
        - lang: typescript
          source: |
            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

            const urlencoded = new URLSearchParams();
            urlencoded.append("token", "123456");

            const requestOptions: RequestInit = {
              method: "PATCH",
              headers: myHeaders,
              body: urlencoded,
              redirect: "follow",
            };

            try {
              const response = await fetch(
                "http://localhost:3000/api/verify-email",
                requestOptions
              );

              const json = await response.json();
              console.log(json);
              const status = json.status;
              if (status === "error") {
                console.error(status)
              } else if (status === "fail") {
                console.log(status)
              } else if (status === "success") {
                console.error(status)
              }
            } catch (error) {
              console.error("Error:", error);
            }

  /login/google:
    get:
      tags:
        - auth
      summary: Google OAuth Login
      description: Initiate Google OAuth flow.
      responses:
        "302":
          description: Redirect to Google OAuth page

  /oauth2/redirect/google:
    get:
      tags:
        - auth
      summary: Google OAuth Redirect
      description: Handle the redirect after Google OAuth login.
      responses:
        "302":
          description: Redirect after Google auth flow completes

  /login/facebook:
    get:
      tags:
        - auth
      summary: Facebook OAuth Login
      description: Initiate Facebook OAuth flow.
      responses:
        "302":
          description: Redirect to Facebook OAuth page

  /oauth2/redirect/facebook:
    get:
      tags:
        - auth
      summary: Facebook OAuth Redirect
      description: Handle the redirect after Facebook OAuth login.
      responses:
        "302":
          description: Redirect after Facebook auth flow completes

  ### Chat Endpoints
  /chat/{user_id}:
    post:
      tags:
        - chat
      summary: Send a chat message
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        "201":
          description: Message sent

  /chats/{user_id}:
    get:
      tags:
        - chat
      summary: Get chat history
      description: Retrieve the chat history between the authenticated user and another user.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: query
          name: next_cursor
          required: false
          schema:
            type: string
          description: Cursor for pagination
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 20
          description: Number of messages to retrieve
      responses:
        "200":
          description: List of chat messages

  ### Notifications Endpoints
  /notifications:
    get:
      tags:
        - notifications
      summary: Get notifications
      responses:
        "200":
          description: List of notifications

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt

  schemas:
    FieldError:
      type: object
      properties:
        type:
          type: string
          description: The type of error.
          example: field
        value:
          type: string
          description: The input value that caused the error.
          example: adrgonzax2
        msg:
          type: string
          description: The error message.
          example: username already exists
        path:
          type: string
          description: The field or path associated with the error.
          example: username
        location:
          type: string
          description: The location of the error (e.g., body, query, params).
          example: body
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success]
          description: The status of the response.
        data:
          type: object
          nullable: true
          description: The data payload of the response.
    FailResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
          description: The status of the response.
        data:
          type: object
          nullable: true
          description: The data payload of the response.
          properties:
            title:
              type: string
            errors:
              type: array
              items:
                $ref: "#/components/schemas/FieldError"
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
          description: The status of the response.
        message:
          type: string
          description: The error message.
        data:
          type: object
          nullable: true
          description: The data payload of the response.
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user.
        firstName:
          type: string
          description: First name of the user.
        lastName:
          type: string
          description: Last name of the user.
        username:
          type: string
          description: Username of the user.
        email:
          type: string
          format: email
          description: Email address of the user.
    Message:
      type: object
      properties:
        message:
          type: string
    Notification:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        message:
          type: string
    Profile:
      type: object
      properties:
        user_id:
          type: string
        username:
          type: string
    PublicProfile:
      type: object
      properties:
        profile_id:
          type: string
          format: uuid
          description: Unique identifier for the profile.
        user_id:
          type: string
          format: uuid
          description: Unique identifier for the user.
        first_name:
          type: string
          description: First name of the user.
        last_name:
          type: string
          description: Last name of the user.
        username:
          type: string
          description: Username of the user.
        gender:
          type: string
          enum: [male, female, other]
          description: Gender of the user.
        age:
          type: integer
          description: Age of the user.
        sexual_preference:
          type: string
          description: Sexual preference of the user.
        biography:
          type: string
          description: Biography of the user.
        interests:
          type: array
          items:
            $ref: "#/components/schemas/Interest"
          description: List of user interests.
        common_interests:
          type: array
          items:
            type: string
          nullable: true
          description: List of common interests, if any.
        pictures:
          type: array
          items:
            $ref: "#/components/schemas/Picture"
          description: List of user pictures.
        fame_rating:
          type: integer
          description: Fame rating of the user.
        profile_picture:
          type: string
          description: URL of the profile picture.
        distance:
          type: number
          format: double
          description: Distance to the user in meters.
        last_online:
          type: string
          format: date-time
          description: Last online timestamp of the user.
        created_at:
          type: string
          format: date-time
          description: Creation timestamp of the profile.
    Interest:
      type: object
      properties:
        interest_id:
          type: string
          format: uuid
          description: Unique identifier for the interest.
        user_id:
          type: string
          format: uuid
          description: User ID associated with the interest.
        interest_tag:
          type: string
          description: Tag describing the interest.
    Picture:
      type: object
      properties:
        picture_id:
          type: string
          format: uuid
          description: Unique identifier for the picture.
        user_id:
          type: string
          format: uuid
          description: User ID associated with the picture.
        picture_url:
          type: string
          description: URL of the picture.

security:
  - cookieAuth: []
